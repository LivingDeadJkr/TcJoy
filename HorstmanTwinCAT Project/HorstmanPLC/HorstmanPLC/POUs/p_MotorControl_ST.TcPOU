<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="p_MotorControl_ST" Id="{1948efc2-07af-4f24-8417-60a242e950fd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM p_MotorControl_ST
VAR
	MC_GearOutDrive1 :MC_Gearout;
	Mc_ResetServoA : MC_Reset;
	Mc_ResetServoB : MC_Reset;
	FbMc_PowerServoB :MC_Power;
	FbMc_PowerServoA :MC_Power;
	

 ServoResetOK :BYTE;
 
 jogbuttontimer :ton;
 
 //Monitor the rising edge of the ecnoder position reset function.
 
ServosReady :byte; // 	
 
// ServoEnableFallingEdge: f_trig;	
 // ServoEnableRisingEdge: r_trig;	
 // SoeResetRisingEdge :r_trig;
	st_Buffermode : MC_Buffermode;
	n_Override :INT := 100;
	SoeReset :BYTE;
	
   EncodeCalibrationRequest_RisingEdge :r_trig;
	
	b_debugSetEncoders: BOOL;
	debugging_belt: BOOL;
	BufferMode: MC_Buffermode;
	BeltForceBit: BOOL;
	state: INT; // State machine current step
	b_ServosReady: BOOL;
	b_Faulted: BOOL;
	testbool: BOOL;
	ServoDisableTimeout :Ton;
	b_DEBUG_STOP: BOOL;
	b_EncoderCalibrationRequest: BOOL;
	RequestedState: INT;
	Requested: INT;
	n_JogReq: INT;
	ServoEnableRtrig : r_trig;
	PowerEnableRtrig: r_trig;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[st_buffermode := MC_Aborting; // stop between moves instead of blending? see the mc_buffermode docs
jogbuttontimer.PT := T#250MS;
b_Faulted := p_faultmonitoring.b_Faulted;
Mc_ResetServoA(Axis := io.DriveAxis1, Execute := Control.b_RequestServoReset);
Mc_ResetServoB(Axis := io.DriveAxis2, Execute := Control.b_RequestServoReset);//STb
io.DriveEnable1 := Control.b_EnableServosFinal;
io.DriveEnable2 := control.b_EnableServosFinal;
MC_GearOutDrive1(Slave := io.DriveAxis2, Execute := NOT Control.b_ExecuteGearIn);
servoenablertrig(CLK := io.PowerEnabled) ;
IF servoenablertrig.q THEN
	control.b_EnableServosReq := TRUE;
END_IF

PowerEnableRtrig(CLK := Global_variables.HmiButtonData0.2) ; // power on off request handler.

IF PowerEnableRtrig.q  AND NOT b_faulted THEN // if we get a power on request, and we're not faulted, try turning on power. turn it off if it's already on.
	IF io.PowerEnabled THEN 
		io.PowerEnabled := FALSE;
		ELSE
		io.PowerEnabled := TRUE;
		END_IF
	END_IF

IF b_faulted THEN io.PowerEnabled := FALSE; END_IF; // drop power on fault.


IF NOT io.PowerEnabled THEN
	control.b_EnableServosReq := false;
END_IF

IF Control.b_RequestServoReset OR b_Faulted OR NOT IO.PowerEnabled THEN // if faulted, reset, or powered off Go to state 0
state :=0; //Reset state
END_IF 


IF Global_variables.HmiButtonData0.4 AND p_motorcontrol_st.state = 2 THEN // if in ready state, and asked to go to jog mode, jump to Gear In Request.
	// if halted and ready, switch to jogging mode. 
	p_motorcontrol_st.state := 5;
END_IF




CASE state OF 
	
0: //Faulted OR Not enabled, but stopped (intialize here)
//servo power off, disable all moves and halts.			
control.b_EnableServosFinal := FALSE; // servo power off
control.b_HaltRequest := FALSE; //
control.b_UseExternalSetpointGenerator := FALSE;

 control.b_ExecuteGearIn := FALSE;

IF control.b_EnableServosReq AND (NOT b_faulted  AND NOT safety.GLOBAL_SAFETY_NOT_OK) THEN
	state := 1; // Leave the faulted state when not faulted.
	//Control.b_RequestServoReset := TRUE;
END_IF
 
1: //ready to enable, but haven't been asked to.
	 // sit here until user enable is high // user can issue reset during this stage to help wake motors.
IF NOT p_FaultMonitoring.b_Faulted AND io.PowerEnabled THEN // 
	control.b_EnableServosFinal := TRUE; // Enable the servos if the servo request is on.
//	Control.b_RequestServoReset := FALSE;	
	ELSE
		control.b_EnableServosFinal := FALSE; // Enable the servos if the servo request is on.
		State := 0;
END_IF


IF b_ServosReady THEN state := 2; END_IF; // if the servos are all enabled, we can move to next state

2: // Turning on servos with NO Commands issued, so halt them. 
control.b_HaltRequest := TRUE;	
IF control.b_Servos_Halted AND RequestedState <> 0 THEN State := RequestedState; END_IF; 

IF control.b_EnableServosReq = FALSE THEN control.b_EnableServosFinal := FALSE; State:=0; END_IF 
				


3: //Switch into SP mode
	;//Enabeld, turn off halts, turn on SP generator access to servos
	control.b_HaltRequest := FALSE;
	control.b_UseExternalSetpointGenerator := TRUE;

	IF control.b_SetpointGeneratorFault	THEN State:= 4; END_IF; //halt if setpoint generator gets an error.
	IF NOT b_ServosReady THEN state := 4; END_IF; // drop power to servos if any servo loses op mode
 

4: //Enable has been dropped, HALT! (No time delay)
	control.b_UseExternalSetpointGenerator := FALSE;
 
	control.b_HaltRequest := TRUE;
   IF control.b_Servos_Halted THEN State := 0; END_IF; //drop back to initial state when halted.
   IF NOT (control.b_EnableServosReq) THEN state := 0; END_IF;
   IF ServoDisableTimeout.Q THEN State := 0; END_IF;
   
   
   
 5://gear in 

 control.b_HaltRequest := FALSE;
 control.b_ExecuteGearIn := TRUE;
 IF P_Motorcontrol.MC_GearInA.InGear THEN state := 6;
END_IF


 6:  // Jog function
 jogbuttontimer();

IF NOT (Global_variables.HmiButtonData0.0 OR Global_variables.HmiButtonData0.1) OR JogButtonTimer.Q THEN
			n_jogreq := 0;
			control.bExecMoveRelA := FALSE;
			jogbuttontimer.IN := FALSE;
			ELSIF Global_variables.HmiButtonData0.0 THEN
				n_jogreq := 5;
				control.bExecMoveRelA := TRUE;
				jogbuttontimer.IN := TRUE;
			ELSIF Global_variables.HmiButtonData0.1THEN
				n_jogreq := -5;
				control.bExecMoveRelA := TRUE;
				jogbuttontimer.IN := TRUE;	
END_IF
  
   
END_CASE

Servodisabletimeout.PT := T#1000MS;
Servodisabletimeout(IN:=(state = 4)); //.q is true 2 seconds after servo enable is no longer commanded




 
 
//Servo enable command sent rising edge	
//ServoEnableRisingedge(CLK:=control.b_EnableServosFinal);
// lost enable, start halt & shutdown procedure
//ServoEnableFallingedge(CLK:=(Control.b_MainCoreServoEnableReq AND control.b_EnableServosReq));

//Send halt command to NC (this is here for timing reasons)
Control.b_HaltRequestExecute := control.b_HaltRequest; // halt if requested, unless the servo system is disabled.  


// pack servo readdy bits into the servoready byte. if a Bit is true, the assosiated servo is ready to roll.
Servosready.0 := io.DriveEnabled1;
Servosready.1 := io.DriveEnabled2;

IF ServosReady = 3 THEN //if all servos ready set bool true
	b_ServosReady := TRUE;
	ELSE
	b_Servosready :=FALSE;
END_IF

Control.n_ServosHalted.0 := P_MotorControl.MC_Halt_ServoB.Done;
Control.n_ServosHalted.1 := P_MotorControl.MC_Halt_ServoA.Done;

//detect when everything is halted.
IF control.n_ServosHalted = 3 THEN // change back to 255 to watch pendulum and laser
	control.b_Servos_Halted :=TRUE;
	ELSE
	control.b_Servos_Halted :=FALSE;
END_IF


//a
	FbMc_PowerServoA(Enable		:= io.DriveEnabled1,
			Enable_Positive	:= Control.b_EnableServosFinal ,
			Enable_Negative	:= Control.b_EnableServosFinal ,
			Override		:= n_Override ,
			BufferMode		:= st_Buffermode ,
			Axis			:= io.DriveAxis1 );

//Servo B		
	FbMc_PowerServoB(Enable		:= io.DriveEnabled2,
			Enable_Positive	:= Control.b_EnableServosFinal ,
			Enable_Negative	:= Control.b_EnableServosFinal ,
			Override		:= n_Override ,
			BufferMode		:= st_Buffermode ,
			Axis			:= io.DriveAxis2 );	

			
			// when we see execute reset a bit,
			// watch rising edge for done bit blocking it with error bit?
			//set /reset bits to fill offsets byte
			//send summary 






	
]]></ST>
    </Implementation>
    <LineIds Name="p_MotorControl_ST">
      <LineId Id="3203" Count="0" />
      <LineId Id="4507" Count="0" />
      <LineId Id="3932" Count="0" />
      <LineId Id="4413" Count="0" />
      <LineId Id="3974" Count="0" />
      <LineId Id="4617" Count="0" />
      <LineId Id="4619" Count="0" />
      <LineId Id="3933" Count="0" />
      <LineId Id="4707" Count="3" />
      <LineId Id="4716" Count="0" />
      <LineId Id="4720" Count="1" />
      <LineId Id="4723" Count="2" />
      <LineId Id="4727" Count="2" />
      <LineId Id="4726" Count="0" />
      <LineId Id="4732" Count="0" />
      <LineId Id="4722" Count="0" />
      <LineId Id="4719" Count="0" />
      <LineId Id="4712" Count="0" />
      <LineId Id="4711" Count="0" />
      <LineId Id="4713" Count="1" />
      <LineId Id="4706" Count="0" />
      <LineId Id="3934" Count="0" />
      <LineId Id="3936" Count="1" />
      <LineId Id="4571" Count="0" />
      <LineId Id="4575" Count="0" />
      <LineId Id="4567" Count="3" />
      <LineId Id="4565" Count="1" />
      <LineId Id="3935" Count="0" />
      <LineId Id="3239" Count="0" />
      <LineId Id="3901" Count="0" />
      <LineId Id="3905" Count="0" />
      <LineId Id="3931" Count="0" />
      <LineId Id="3914" Count="0" />
      <LineId Id="3946" Count="0" />
      <LineId Id="3956" Count="1" />
      <LineId Id="3992" Count="0" />
      <LineId Id="4520" Count="0" />
      <LineId Id="3971" Count="0" />
      <LineId Id="4306" Count="0" />
      <LineId Id="3972" Count="0" />
      <LineId Id="4416" Count="0" />
      <LineId Id="3973" Count="0" />
      <LineId Id="3908" Count="0" />
      <LineId Id="3930" Count="0" />
      <LineId Id="3915" Count="0" />
      <LineId Id="3977" Count="0" />
      <LineId Id="4061" Count="1" />
      <LineId Id="4414" Count="0" />
      <LineId Id="4063" Count="0" />
      <LineId Id="4415" Count="0" />
      <LineId Id="3981" Count="0" />
      <LineId Id="4374" Count="0" />
      <LineId Id="4373" Count="0" />
      <LineId Id="3920" Count="0" />
      <LineId Id="4236" Count="0" />
      <LineId Id="3929" Count="0" />
      <LineId Id="3985" Count="0" />
      <LineId Id="3982" Count="0" />
      <LineId Id="4456" Count="0" />
      <LineId Id="4089" Count="0" />
      <LineId Id="3912" Count="0" />
      <LineId Id="4461" Count="0" />
      <LineId Id="4460" Count="0" />
      <LineId Id="3928" Count="0" />
      <LineId Id="3917" Count="0" />
      <LineId Id="3983" Count="0" />
      <LineId Id="3986" Count="0" />
      <LineId Id="3993" Count="0" />
      <LineId Id="3987" Count="0" />
      <LineId Id="4234" Count="0" />
      <LineId Id="3927" Count="0" />
      <LineId Id="3989" Count="0" />
      <LineId Id="3925" Count="0" />
      <LineId Id="4091" Count="0" />
      <LineId Id="3942" Count="0" />
      <LineId Id="4090" Count="0" />
      <LineId Id="3990" Count="1" />
      <LineId Id="4239" Count="0" />
      <LineId Id="4470" Count="2" />
      <LineId Id="4476" Count="0" />
      <LineId Id="4511" Count="0" />
      <LineId Id="4477" Count="0" />
      <LineId Id="4516" Count="0" />
      <LineId Id="4521" Count="0" />
      <LineId Id="4518" Count="0" />
      <LineId Id="4523" Count="0" />
      <LineId Id="4522" Count="0" />
      <LineId Id="4517" Count="0" />
      <LineId Id="4519" Count="0" />
      <LineId Id="4512" Count="0" />
      <LineId Id="4473" Count="0" />
      <LineId Id="4490" Count="0" />
      <LineId Id="4499" Count="0" />
      <LineId Id="4504" Count="0" />
      <LineId Id="4494" Count="0" />
      <LineId Id="4496" Count="0" />
      <LineId Id="4500" Count="0" />
      <LineId Id="4505" Count="0" />
      <LineId Id="4498" Count="0" />
      <LineId Id="4497" Count="0" />
      <LineId Id="4501" Count="0" />
      <LineId Id="4506" Count="0" />
      <LineId Id="4491" Count="0" />
      <LineId Id="4474" Count="1" />
      <LineId Id="3906" Count="0" />
      <LineId Id="4462" Count="0" />
      <LineId Id="3996" Count="0" />
      <LineId Id="3245" Count="0" />
      <LineId Id="4463" Count="3" />
      <LineId Id="4468" Count="1" />
      <LineId Id="3326" Count="1" />
      <LineId Id="3338" Count="1" />
      <LineId Id="3355" Count="0" />
      <LineId Id="3357" Count="2" />
      <LineId Id="3381" Count="3" />
      <LineId Id="3968" Count="0" />
      <LineId Id="3964" Count="3" />
      <LineId Id="3391" Count="0" />
      <LineId Id="3969" Count="0" />
      <LineId Id="3392" Count="1" />
      <LineId Id="3400" Count="7" />
      <LineId Id="3420" Count="7" />
      <LineId Id="4661" Count="0" />
      <LineId Id="3428" Count="6" />
      <LineId Id="3482" Count="0" />
      <LineId Id="3564" Count="4" />
      <LineId Id="3578" Count="0" />
      <LineId Id="3583" Count="1" />
      <LineId Id="3647" Count="0" />
      <LineId Id="4240" Count="0" />
      <LineId Id="3650" Count="1" />
      <LineId Id="1312" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>